from django.db import models

NULLABLE = {
    'blank': True,
    'null': True
}


class BranchOffice(models.Model):
    """Модель описывающая содрежание таблицы: Филиалы"""

    class Office(models.TextChoices):
        administration = 'Администрация Общества', 'АО'
        bashkiria = 'Башкирское управление', 'БУ'
        volgograd = 'Волгоградское управление', 'ВУ'
        volgo_camskoye = 'Волго-Камское управление', 'ВКУ'
        zavolzhskoye = 'Заволжское управление', 'ЗУ'
        north = 'Северное управление', 'СЕВУ'
        krasnodar = 'Краснодарское управление', 'КРАУ'
        siberia = 'Сибирское управление', 'СИБУ'
        central = 'Центральное управление', 'ЦУ'
        north_ural = 'Северо-Уральское управление', 'СУУ'
        north_west = 'Северо-Западное управление', 'СЗУ'
        west_ural = 'Западно-Уральское управление', 'ЗУУ'

    class KVD(models.TextChoices):
        construction_inspection = 'Строительная инспекция', 'ГП СИ'
        technical_inspection = 'Техническая инспекция', 'ГП ТИ'
        departmental_acceptance = 'Ведомственная приемка', 'ГП МТР'
        energy_inspection = 'Энергетическая инспекция', 'ГП ЭН'
        production_department = 'Производственный отдел', 'РПВД'

    branch_office = models.CharField(
        max_length=45,
        choices=Office.choices,
        verbose_name='Филиал'
    )
    department = models.CharField(
        max_length=250,
        verbose_name='Отдел'
    )
    position = models.CharField(
        max_length=250,
        verbose_name='Должность'
    )
    kvd = models.CharField(
        max_length=100,
        choices=KVD.choices,
        verbose_name='КВД'
    )

    def __str__(self):
        return self.branch_office

    class Meta:
        verbose_name = 'Управление'
        verbose_name_plural = 'Управления'
        ordering = ('-branch_office', '-kvd')


class Certification(models.Model):

    """Модель описывающая содержание таблицы: Аттестуемых"""

    class MethodNDT(models.TextChoices):
        VMI = 'Визуальный и измерительный контроль', 'ВИК'
        UI = 'Ультразвуковой контроль', 'УК'
        ECI = 'Вихретоковый контроль', 'ВК'
        EI = 'Электрический контроль', 'ЭК'
        PSCI = 'Проникающие вещества: капилярный контроль', 'ПВК'
        PSLD = 'Проникающие вещества: течеискание', 'ПВТ'
        TI = 'Тепловой контроль', 'ТК'
        RI = 'Радиографический контроль', 'РК'
        MI = 'Магнитный контроль', 'МК'
        OI = 'Оптический контроль', 'ОК'
        AEI = 'Акустико-эмиссионный контроль', 'АЭ'
        VDI = 'Вибродиагностический контроль', 'ВД'

    class TypeCertification(models.TextChoices):
        primary = 'Первичная аттестация', 'Первичная'
        extension = 'Продление срока действия удостоверения', 'Продление'
        additional = 'Дополнительная аттестация', 'Дополнительная'

    class ObjectsNTD(models.TextChoices):
        BQ = 'Котельное оборудование', 'КО'
        GE = 'Газовое оборудование', 'ГО'
        LTE = 'Подъемно-транспортное оборудование', 'ПТО'

    # class TechnicalDevices(models.TextChoices):
        # BQ_1 = [
        #     ('''1.1.  Котлы (паровые, в том числе котлы-бойлеры, а также автономные
        # пароперегреватели и экономайзеры; водогрейные и пароводогрейные;)
        # энерготехнологические; котлы-утилизаторы; котлы передвижных
        # и транспортабельных установок; паровые и жидкостные, работающие
        # с высокотемпературными органическими и неорганическими
        # теплоносителями (кроме воды и водяного пара); электрокотлы''', '1.1'),
        #     ('''1.2. Металлические конструкции для котельного оборудования''', '1.2')
        # ]
        # BQ_3 = '''1.3. Сосуды, работающие под давлением пара, газов, жидкостей''', '1.3'
        # BQ_4 = '''1.4. Трубопроводы пара и горячей воды''', '1.4'
        # BQ_5 = '''1.5. Барокамеры''', '1.5'
        # GE_1 = '''2.1. Внутренние газопроводы''', '2.1'
        # GE_2 = '''2.2. Наружные газопроводы стальные''', '2.2'
        # GE_3 = '''2.3. Наружные газопроводы полиэтиленовые''', '2.3'
        # GE_4 = '''2.4. Детали и узлы, газовое оборудование''', '2.4'
        # LTE_1 = '''3.1. Грузоподъемные краны''', '3.1'
        # LTE_2 = '''3.2. Подъемники (вышки)''', '3.2'
        # LTE_3 = '''3.3. Дороги канатные, их агрегаты, механизмы и детали. Фуникулеры''', '3.3'
        # LTE_4 = '''3.4. Эскалаторы. Лифты. Платформы подъемные для инвалидов. Пассажирские конвейеры''', '3.4'
        # LTE_5 = '''3.5. Краны – трубоукладчики''', '3.5'
        # LTE_6 = '''3.6. Краны – манипуляторы''', '3.6'
        # LTE_7 = '''3.7. Тали, лебедки''', '3.7'
        # LTE_8 = '''3.8. Устройства грузозахватные. Цепи для подъемно-транспортного оборудования''', '3.8'
        # LTE_9 = '''3.9. Крановые пути''', '3.9'
        # ME_1 = '''4.1. Технические устройства для горнодобывающих и горнообогатительных производств
        # и подземных объектов''', '4.1'
        # SBF_1 = '''5.1. Металлические конструкции пролётных строений, опор и пилонов стальных
        # мостов при изготовлении в заводских условиях''', '5.1'
        # SBF_2 = '''5.2. Металлические конструкции пролётных строений, опор и пилонов стальных
        # мостов при сборке, сварке и ремонте в монтажных условиях''', '5.2'
        # OGPE_1 = '''6.1. Нефтегазопромысловое и буровое оборудование''', '6.1'
        # OGPE_2 = '''6.2. Морские трубопроводы, объекты на шельфе (трубопроводы на платформах,
        # а также сварные основания морских платформ)''', '6.2'
        # OGPE_3 = '''6.3. Промысловые газонефтепродуктопроводы''', '6.3'
        # OGPE_4 = '''6.4. Магистральные газопроводы''', '6.4'
        # OGPE_5 = '''6.5. Магистральные нефтепроводы и нефтепродуктопроводы.''', '6.5'
        # OGPE_6 = '''6.6. Резервуары для хранения нефти и нефтепродуктов''', '6.6'
        # OGPE_7 = '''6.7. Нефтегазопроводные трубы. Детали трубопроводов. Запорная
        # арматура. Насосы, компрессоры''', '6.7'
        # OGPE_8 = '''6.8. Технологические трубопроводы в пределах УКПГ, КС; ЛДПС, НПС;
        # СПХГ; ДКС; ГРС; УЗРГ; ПРГ и др., за исключением трубопроводов, обеспечивающих транспорт
        # газа, нефти и нефтепродуктов; трубопроводы автоматизированных газонаполнительных
        # компрессорных станций (АГНКС)''', '6.8'
        # MEF_1 = '''7.1. Доменное, коксовое, сталеплавильное оборудование''', '7.1'
        # MEF_2 = '''7.2. Технологическое оборудование и трубопроводы для черной и цветной металлургии''', '7.2'
        # MEF_3 = '''7.3. Технические устройства для производства черных и цветных
        # металлов и сплавов на их основе''', '7.3'
        # ECPOREFHI_1 = '''8.1. Оборудование химических, нефтехимических,
        # нефтеперерабатывающих производств, работающее под давлением до 16 МПа''', '8.1'
        # ECPOREFHI_2 = '''8.2. Оборудование химических, нефтехимических, нефтеперерабатывающих
        # производств, работающее под давлением более 16 МПа''', '8.2'
        # ECPOREFHI_3 = '''8.3. Оборудование химических, нефтехимических,
        # нефтеперерабатывающих производств, работающее под вакуумом.''', '8.3'
        # ECPOREFHI_4 = '''8.4. Резервуары для хранения взрывопожароопасных и токсичных веществ''', '8.4'
        # ECPOREFHI_5 = '''8.5. Изотермические хранилища''', '8.5'
        # ECPOREFHI_6 = '''8.6. Криогенное оборудование''', '8.6'
        # ECPOREFHI_7 = '''8.7. Оборудование аммиачных холодильных установок''', '8.7'
        # ECPOREFHI_8 = '''8.8. Печи, котлы-утилизаторы, энерготехнологические, ВОТ''', '8.8'
        # ECPOREFHI_9 = '''8.9. Компрессорное и насосное оборудование''', '8.9'
        # ECPOREFHI_10 = '''8.10. Центрифуги, сепараторы''', '8.10'
        # ECPOREFHI_11 = '''8.11. Цистерны, контейнеры (бочки), баллоны для взрывопожароопасных
        # и токсичных веществ''', '8.11'
        # ECPOREFHI_12 = '''8.12. Технологические трубопроводы и детали трубопроводов''', '8.12'
        # ETDG_1 = '''9.1. Транспортные средства (цистерны, контейнеры), тара, упаковка, предназначенных
        # для транспортирования опасных веществ (кроме перевозки сжиженных токсичных газов)''', '9.1'
        # ETDG_2 = '''9.2. Подъездные пути необщего пользования''', '9.2'
        # ESPVRM_1 = '''10.1. Воздуходувные машины (турбокомпрессоры воздушные, турбовоздуходувки)''', '10.1'
        # ESPVRM_2 = '''10.2. Вентиляторы (центробежные, радиальные, ВВД)''', '10.2'
        # ESPVRM_3 = '''10.3. Дробилки молотковые, вальцовые станки, энтолейторы''', '10.3'
        # BS_1 = '''11.1. Металлические строительные конструкции''', '11.1'
        # BS_2 = '''11.2. Бетонные и железобетонные конструкции, арматура, арматурные
        # и закладные изделия железобетонных конструкций,''', '11.2'
        # BS_3 = '''11.3. Металлические трубопроводы''', '11.3'
        # BS_4 = '''11.4. Конструкции и трубопроводы из полимерных материалов''', '11.4'

    office = models.ForeignKey(
        BranchOffice,
        on_delete=models.CASCADE,
        verbose_name='Управление'
    )
    first_name = models.CharField(
        max_length=200,
        verbose_name='Имя'
    )
    patronymic = models.CharField(
        max_length=200,
        verbose_name='Отчество'
    )
    last_name = models.CharField(
        max_length=200,
        verbose_name='Фамилиля'
    )
    birth_date = models.DateTimeField(
        auto_now_add=True,
        db_index=True,
        verbose_name='Дата рождения'
    )
    preview = models.ImageField(
        upload_to='photo_expert/',
        verbose_name='Фото специалиста',
        **NULLABLE
    )
    certificate = models.ImageField(
        upload_to='photo_certificate/',
        verbose_name='Фото удостоверения',
        ** NULLABLE
    )
    method = models.CharField(
        max_length=100,
        choices=MethodNDT.choices,
        verbose_name='Метод НК'
    )
    type_certification = models.CharField(
        max_length=45,
        choices=TypeCertification.choices,
        verbose_name='Вид аттестации'
    )
    objects_ntd = models.CharField(
        max_length=100,
        choices=ObjectsNTD.choices,
        verbose_name='Объекты контроля'
    )
    technical_devices = models.CharField(
        max_length=200,
        # choices=TechnicalDevices.choices,
        verbose_name='Технические устройства'
    )
    start_date = models.DateTimeField(
        auto_now_add=False,
        db_index=True,
        verbose_name='Дата начала действия удостоверения'
    )
    end_date = models.DateTimeField(
        auto_now_add=False,
        db_index=True,
        verbose_name='Дата окончания действия удостоверения'
    )

    # def __init__(self, *args, **kwargs):
    #     super().__init__(*args, **kwargs)
    #     if self.technical_devices:
    #         self.technical_devices = eval(self.technical_devices)

    def __str__(self):
        return f"{self.first_name} {self.patronymic} {self.last_name}"

    class Meta:
        verbose_name = 'Удостоверение'
        verbose_name_plural = 'Удостоверения'
        ordering = ('-last_name', '-type_certification')
